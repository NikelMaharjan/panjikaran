

import 'dart:async';

import 'package:circular_countdown_timer/circular_countdown_timer.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:model/models/common_state/common_state.dart';
import 'package:model/models/otp.dart';
import 'package:model/provider/otp_provider.dart';
import 'package:model/provider/otp_state_provider.dart';
import 'package:model/services/otp_services.dart';

class OtpPage extends ConsumerStatefulWidget {

  String token;
  OtpPage({required this.token});

  @override
  ConsumerState<OtpPage> createState() => _OtpPageState();

}

class _OtpPageState extends ConsumerState<OtpPage> {
  late Timer _timer;
  int _start = 10;

  void startTimer() {
    const oneSec = Duration(seconds: 1);
    _timer = Timer.periodic(
      oneSec,
          (Timer timer) {
        if (_start == 0) {
          ref.invalidate(otpStateProvider);
          _start = 10;
        } else {
          setState(() {
            _start--;
          });
        }
      },
    );
  }

  @override
  void initState() {
    startTimer();
    super.initState();
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }


  @override
  Widget build(BuildContext context) {


    final otpData = ref.watch(otpProvider(widget.token));


    final otpState = ref.watch(otpStateProvider);



    return Scaffold(
      appBar: AppBar(
        
        automaticallyImplyLeading: true,
        backgroundColor: Colors.green,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            height: 120,
            color: Colors.green,
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 20.0),
                  child: CircleAvatar(
                    backgroundColor: Colors.grey,
                    radius: 40,
                    child: Icon(CupertinoIcons.profile_circled, size: 40,),
                  ),
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text("Nikel Maharajn", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),),
                    Text("nikelmaharjan@gmail.com")
                  ],
                )
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Row(
                  children: [
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Icon(Icons.check_circle_outline),
                    ),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text("One-time passwords enabled", style: TextStyle(fontSize: 20),),
                          Text(
                            "You can use the one-time password codes generated by this app to verify your sign-ins",
                            style: TextStyle(letterSpacing: 1),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 40,),



                Text("One-time password code",
                  style: TextStyle(fontSize: 20),),

                SizedBox(height: 20,),


                //
                // Row(
                //   mainAxisAlignment: MainAxisAlignment.center,
                //   children: [
                //     CircleAvatar(
                //       radius: 18,
                //       backgroundColor: Colors.black,
                //       child: CircleAvatar(
                //         radius: 16,
                //         backgroundColor: Colors.white,
                //         child: Text("$_start"),
                //       ),
                //     ),
                //
                //     SizedBox(width: 10,),
                //
                //     otpData.when(
                //         data: (data){
                //           print(data.toString());
                //           return Text(data.otp.toString(), style: TextStyle(fontSize: 30, letterSpacing: 8),);
                //         },
                //         error: (err, stack) => Center(child: Text(err.toString()),),
                //         loading: () => Center(child: CircularProgressIndicator(),)
                //     ),
                //
                //
                //     // StreamBuilder(
                //     //     initialData: Otp(expired_at: "30", otp: "0"),
                //     //
                //     //     stream: OtpServices.getOtpToken(token: widget.token),
                //     //     builder: (context, snapshot) {
                //     //       return  Text(
                //     //         snapshot.data!.otp, style: TextStyle(fontSize: 50),
                //     //       );
                //     //     }
                //     // ),
                //   ],
                // ),

                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircleAvatar(
                      radius: 18,
                      backgroundColor: Colors.black,
                      child: CircleAvatar(
                        radius: 16,
                        backgroundColor: Colors.white,
                        child: Text("$_start"),
                      ),
                    ),

                    SizedBox(width: 10,),
                    
                    _buildOtp(otpState)

                  ],
                )







              ],
            ),
          ),

        ],
      ),
    );
  }

   _buildOtp(CommonState otpState) {
    if(otpState.isLoad){
      return CircularProgressIndicator();
    }

    else if(otpState.errText.isEmpty){

      return Text(otpState.otp!.otp.toString(), style: TextStyle(fontSize: 20),);

    }

    else{
      return Center(child: Text(otpState.errText),);
    }
  }

}
